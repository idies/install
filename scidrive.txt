SciDrive web service installation
=================================


# git clone https://github.com/idies/scidrive.git -b feature/keystone

(should merge down to master and tag if works...)

mysql> CREATE DATABASE scidrive;
mysql> USE scidrive;
mysql> SOURCE sql/vospace.sql;
mysql> GRANT ALL ON scidrive.* TO 'scidrive'@'%' IDENTIFIED BY 'almafa';
mysql> GRANT ALL ON scidrive.* TO 'scidrive'@'localhost' IDENTIFIED BY 'almafa';

test with

mysql> SHOW TABLES;


Make changes to the scidrive/src/application.properties file
	- change region
	- mysql user and password
	
---> fishy
Generate a pool of SWIFT users using the scidrive/sql/generate_swift_users.pl script
	- before running, modify: database, user, pw, swift url
<---

Intalling:

need to have apache ant and a newer java to build war file for tomcat

# yum install ant java-1.7.0-openjdk java-1.7.0-openjdk-devel -y

test versions:

# java -version
# javac -version

to enable deployment with ant, you need to install tomcate manager
http://www.unixmen.com/howto-install-tomcat-in-centos-fedora-the-easy-way/

yum install tomcat6-webapps tomcat6-admin-webapps -y

test with

# curl "http://localhost:8080/manager"

should return nothing (no error)

To create a tomcat admin password edit /etc/tomcat6/tomcat-users.xml and add

<role rolename="admin"/>
<role rolename="manager"/>
<user name="scidrive" password="almafa" roles="admin,manager" />

# service tomcat6 restart

modify build.properties, don't forget the port number of tomcat!

then in the scidrive source root run ant to build stuff:
(will download packages on first build, be patient)

# ant

Then deploy:

# ant deploy

It will be placed into /var/lib/tomcat6/webapps/

Copy application.properties to /etc/vospace/





SCIDRIVE-UI
===========


Clone the ui from github and initialize (tons of) submodules

# git clone https://github.com/idies/scidrive-ui.git -b feature_auth
# cd scidrive-ui
# git submodule update --init --recursive

Fix bug in dojo

# cd src/dojox/form/resources/
# wget https://bugs.dojotoolkit.org/raw-attachment/ticket/16320/CheckedMultiSelect.css
# rm CheckedMultiSelect.css
# mv CheckedMultiSelect.css.1 CheckedMultiSelect.css

Modify scidrive-ui/src/scidrive/resources/regions.json

# ./build.sh

It will create the directory dist with js files minified. Copy the whole stuff to the webserver:

# cp -R dist /var/www/html/scidrive-ui

Test:

# curl "http://localhost/scidrive-ui/"

To access web remotely:

http://www.cyberciti.biz/faq/howto-rhel-linux-open-port-using-iptables/

Edit

Add to the _begining_ of list:

-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT

Then restart iptables

# service iptables restart

Replace openJDK with Oracle JDK:

- download rpm from Oracle
- yum install ...rpm

# alternatives --install /usr/bin/java java /usr/java/jdk1.7.0_67/jre/bin/java 200000
# alternatives --install /usr/bin/javaws javaws /usr/java/jdk1.7.0_67/jre/bin/javaws 200000
 
# service tomcat6 restart

http://www.if-not-true-then-false.com/2010/install-sun-oracle-java-jdk-jre-7-on-fedora-centos-red-hat-rhel/


Configuring scidrive
====================

* scidrive/src/application.properties

# linux services
storage.url = http://172.23.24.32:8081/auth/v1.0
keystone.url = http://172.23.24.32:35357
# Database
db.login = scidrive
db.password = password
db.driver = com.mysql.jdbc.Driver
db.url = jdbc:mysql://172.23.24.32/scidrive?autoReconnect=true&characterEncoding=utf8&useUnicode=true
# RabbitMQ vhost & host
rabbitmq.vhost = /
rabbitmq.host = 172.23.24.32
# swift
service.tenant = service
service.user = swift
service.password = almafa

This file has to be copied manually to a location defined by absolute path in scridrive/src/settings.xml

* scidrive-ui/src/scidrive/resources/regions	-- configure regions
* scidrive-ui/src/auth/SciServerLogin.js	-- configure login portal url


Keystone preconfiguration to work with skydrive
===============================================

Keystone tokens should contain endpoints. For this purporse, users must be associated with a project/token and added to a role.

We assume test user already exists

Create a generic role for users:

# keystone role-create  --name user

Create a tenant (will need to do it for each user)

# keystone user-create --name test --pass password
# keystone tenant-create --name test

Add user to the role

# keystone user-role-add --user test --role user --tenant test

Verify it by authenticating the user and examining the returned token:

curl -X POST "http://172.23.24.32:35357/v2.0/tokens" \
 -H "X-Auth-Token: d2e63a200f9dd4ba99e9" \
 -H "Content-Type: application/json" \
 -d '{
   "auth":{
      "tenantName":"test",
      "passwordCredentials":{
         "username":"test",
         "password":"password"
      }
   }
}'

It should contain the endpoints.

Once a token is created, verify it's scoped within the project:

curl -H "X-Auth-Token: d2e63a200f9dd4ba99e9" \
-H "X-Subject-Token: 8df23fc6536840afada893985d5b54a9" \
"http://172.23.24.32:35357/v3/auth/tokens"

Here are the important sections from proxy-server.conf

[filter:keystone]
use = egg:swift#keystoneauth
operator_roles = user
reseller_admin_role = admin
#is_admin = true
cache = swift.cache

[filter:authtoken]
paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory
admin_tenant_name = service
admin_user = swift
admin_password = password
auth_host = 172.23.24.32
auth_port = 35357
auth_protocol = http
auth_uri = http://172.23.24.32:5000/
signing_dir = /tmp/keystone-signing-swift
